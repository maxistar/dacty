// keyboard stickers generator for waterslide paper
// npm i canvas
import fs from "fs";
import { createCanvas, registerFont } from "canvas";

/** ========== CONFIG ========== */
const CONFIG = {
    page: { widthMM: 297, heightMM: 210, dpi: 600 }, // A4
    marginMM: { top: 8, right: 8, bottom: 8, left: 8 },
    cellMM: { w: 14, h: 14 },         // –±–∞–∑–æ–≤—ã–π unit (1u)
    gapMM: { x: 2, y: 2 },            // –∑–∞–∑–æ—Ä—ã (–º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏/—Ä—è–¥–∫–∞–º–∏)
    gridStrokeMM: 0.15,
    fonts: {
        family: "Arial",
        singleLegendSizeMM: 4.6,
        twoLegendSizeMM: 3.8,
        threeLegendSizeMM: 3.2,
    },
    colors: {
        grid: "#666",
        text: "#000",
        cropMarks: "#444",
        debugCellOutline: null, // –Ω–∞–ø—Ä–∏–º–µ—Ä "#bbb"
    },
};

/** –ü–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–ª—è—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞–∫–ª–µ–π–∫–∏ (0..1) */
const POS = {
    center: [0.5, 0.5],
    topLeft: [0.22, 0.22],
    topRight: [0.78, 0.22],
    bottomLeft: [0.22, 0.78],
    bottomRight: [0.78, 0.78],
    bottomCenter: [0.5, 0.8],
    leftCenter: [0.22, 0.5],
    rightCenter: [0.78, 0.5],
};

/**
 * ========== LAYOUT ==========
 * –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è –∫–ª–∞–≤–∏—à–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø–æ–ª–µ u (—à–∏—Ä–∏–Ω–∞ –≤ —é–Ω–∏—Ç–∞—Ö).
 * –ü—Ä–∏–º–µ—Ä: { u: 1.5, legends:["Tab"], positions:["leftCenter"] }
 * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é u = 1.
 */
const LAYOUT = [
    // –†—è–¥ 1 ‚Äî –¥–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ 1.5u: Esc, Backspace
    [
        { u: 1.5, legends: ["`","—ë"], positions: ["center","bottomLeft"] },
        { legends: ["1", "!", "üêß"], positions: ["bottomLeft", "topLeft", "bottomRight"] },
        { legends: ["2", "@", "üçé"], positions: ["bottomLeft", "topLeft", "bottomRight"] },
        { legends: ["3", "#", "bt3"], positions: ["bottomLeft", "topLeft", "bottomRight"] },
        { legends: ["4", "‚Ç¨", "bt4"], positions: ["bottomLeft", "topLeft", "bottomRight"] },
        { legends: ["5", "%", "bt5"], positions: ["bottomLeft", "topLeft", "bottomRight"] },
        { legends: ["6", "^"], positions: ["bottomLeft", "topLeft"] },
        { legends: ["7", "&"], positions: ["bottomLeft", "topLeft"] },
        { legends: ["8", "*"], positions: ["bottomLeft", "topLeft"] },
        { legends: ["9", "("], positions: ["bottomLeft", "topLeft"] },
        { legends: ["0", ")"], positions: ["bottomLeft", "topLeft"] },
        { u: 1.5, legends: ["ESC"], positions: ["center"] },
    ],
    // –†—è–¥ 2 ‚Äî Tab 1.5u, Enter 1.5u
    [
        { u: 1.5, legends: ["-"], positions: ["center"] },
        { legends: ["Q","–π"], positions: ["center","bottomLeft"] },
        { legends: ["W","1","—Ü"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["E","2","—É"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["R","3","–∫"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["T","–µ"], positions: ["center","bottomLeft"] },
        { legends: ["Y","–Ω"], positions: ["center","bottomLeft"] },
        { legends: ["U","–≥"], positions: ["center","bottomLeft"] },
        { legends: ["I","—à"], positions: ["center","bottomLeft"] },
        { legends: ["O","—â"], positions: ["center","bottomLeft"] },
        { legends: ["P","–∑"], positions: ["center","bottomLeft"] },
        { u: 1.5, legends: ["‚á•"], positions: ["center"] },
    ],
    // –†—è–¥ 3 ‚Äî Caps 1.5u, –¥–≤–∞ 1.5u –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
    [
        { u: 1.5, legends: ["'","—ç"], positions: ["center","bottomLeft"] },
        { legends: ["A","—Ñ"], positions: ["center","bottomLeft"] },
        { legends: ["S","4","—ã"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["D","5","–≤"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["F","6","–∞"], positions: ["center","bottomRight","bottomLeft"] }, // –ø—Ä–∏–º–µ—Ä—ã 1.5u
        { legends: ["G","–ø"], positions: ["center","bottomLeft"] },
        { legends: ["H","‚Üê","—Ä"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["J","‚Üì","–æ"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["K","‚Üë","–ª"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["L","‚Üí","–¥"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["P","–∑"], positions: ["center","bottomLeft"] },
        { u: 1.5,legends: ["üåê"], positions: ["center"] },
    ],
    // –†—è–¥ 4 ‚Äî Shift 1.5u —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞
    [
        { u: 1.5, legends: ["Shift"], positions: ["center"] },
        { legends: ["Z","—è"], positions: ["center","bottomLeft"] },
        { legends: ["X","7","—á"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["C","8","—Å"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["V","9","–º"], positions: ["center","bottomRight","bottomLeft"] },
        { legends: ["B","–∏"], positions: ["center","bottomLeft"] },
        { legends: ["N","—Ç"], positions: ["center","bottomLeft"] },
        { legends: ["M","—å"], positions: ["center","bottomLeft"] },
        { legends: [",","–±"], positions: ["center","bottomLeft"] },
        { legends: [".","—é"], positions: ["center","bottomLeft"] },
        { legends: ["P","–∑"], positions: ["center","bottomLeft"] },
        { u: 1.5, legends: ["Shift"], positions: ["center"] },
    ],
    // –†—è–¥ 5 ‚Äî Alt, Win, Space 1.5u, AltGr 1.5u, Menu 1.5u ‚Äî –¥–æ–±—å—ë–º –¥–æ ~10 —à—Ç—É–∫ 1.5u
    [
        { u: 1, legends: ["Fn", "F1", "‚ÜØ"], positions: ["topLeft", "topRight", "bottomCenter"] },
        { u: 1, legends: ["Alt","‚å•"], positions: ["center","topRight"] },
        { u: 1, legends: ["Win"], positions: ["center"] },
        { u: 1, legends: [" "], positions: ["center"] },
        { u: 1, legends: ["[","—Ö"], positions: ["center","bottomLeft"] },
        { u: 1, legends: ["]","—ä"], positions: ["center","bottomLeft"] },
        { u: 1, legends: ["Lower"], positions: ["center"] },
        { u: 1, legends: ["Raise"], positions: ["center"] },
        { u: 1, legends: ["‚á¶"], positions: ["center"] },
        { u: 1, legends: ["Ctrl","‚åò"], positions: ["center","topRight"] },
        { u: 1, legends: [" "], positions: ["center"] },
        { u: 1, legends: ["'"], positions: ["center"] },
        { u: 1, legends: ["AltGr"], positions: ["center"] },
    ],
];

/** ============================== */
const mmToPx = (mm, dpi) => Math.round((mm / 25.4) * dpi);

function setFontPx(ctx, px, family, weight = "") {
    ctx.font = `${weight ? weight + " " : ""}${px}px "${family}"`;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
}

function chooseFontSizePx(legendCount, cfg) {
    const { dpi } = cfg.page;
    const mm = legendCount === 1
        ? cfg.fonts.singleLegendSizeMM
        : legendCount === 2
            ? cfg.fonts.twoLegendSizeMM
            : cfg.fonts.threeLegendSizeMM;
    return mmToPx(mm, dpi);
}

function drawCropMarks(ctx, W, H, color) {
    const len = Math.min(W, H) * 0.02;
    const pad = Math.min(W, H) * 0.005;
    ctx.strokeStyle = color;
    ctx.lineWidth = 1;

    // —É–≥–ª—ã
    ctx.beginPath(); ctx.moveTo(pad, pad + len); ctx.lineTo(pad, pad); ctx.lineTo(pad + len, pad); ctx.stroke();
    ctx.beginPath(); ctx.moveTo(W - pad - len, pad); ctx.lineTo(W - pad, pad); ctx.lineTo(W - pad, pad + len); ctx.stroke();
    ctx.beginPath(); ctx.moveTo(pad, H - pad - len); ctx.lineTo(pad, H - pad); ctx.lineTo(pad + len, H - pad); ctx.stroke();
    ctx.beginPath(); ctx.moveTo(W - pad - len, H - pad); ctx.lineTo(W - pad, H - pad); ctx.lineTo(W - pad, H - pad - len); ctx.stroke();
}

/** –°—á–∏—Ç–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Ä—è–¥–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Å —É—á—ë—Ç–æ–º u –∏ –º–µ–∂–∫–ª–∞–≤–∏—à–Ω—ã—Ö –∑–∞–∑–æ—Ä–æ–≤ */
function measureRowWidthPx(row, cellW, gapX) {
    if (!row || row.length === 0) return 0;
    let width = 0;
    row.forEach((key, idx) => {
        const u = Number(key.u || 1);
        const keyW = u * cellW + (u - 1) * gapX;
        width += keyW;
        if (idx < row.length - 1) width += gapX; // –º–µ–∂–∫–ª–∞–≤–∏—à–Ω—ã–π –∑–∞–∑–æ—Ä
    });
    return width;
}

/** –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä */
function renderStickers(layout, cfg) {
    const { widthMM, heightMM, dpi } = cfg.page;
    const pageW = mmToPx(widthMM, dpi);
    const pageH = mmToPx(heightMM, dpi);

    const margin = {
        top: mmToPx(cfg.marginMM.top, dpi),
        right: mmToPx(cfg.marginMM.right, dpi),
        bottom: mmToPx(cfg.marginMM.bottom, dpi),
        left: mmToPx(cfg.marginMM.left, dpi),
    };

    const cellW = mmToPx(cfg.cellMM.w, dpi);
    const cellH = mmToPx(cfg.cellMM.h, dpi);
    const gapX = mmToPx(cfg.gapMM.x, dpi);
    const gapY = mmToPx(cfg.gapMM.y, dpi);

    // –≤—ã—á–∏—Å–ª–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Ä—è–¥–∞ (—Å —É—á—ë—Ç–æ–º u)
    const rows = layout.length;
    const rowWidths = layout.map((row) => measureRowWidthPx(row, cellW, gapX));
    const gridW = Math.max(...rowWidths, 0);
    const gridH = rows * cellH + (rows - 1) * gapY;

    const maxW = pageW - margin.left - margin.right;
    const maxH = pageH - margin.top - margin.bottom;
    if (gridW > maxW || gridH > maxH) {
        console.warn(
            `‚ö†Ô∏è –°–µ—Ç–∫–∞ (${gridW}x${gridH}px) –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç—å –ø–µ—á–∞—Ç–∏ (${maxW}x${maxH}px). ` +
            `–£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (cellMM/gapMM) –∏–ª–∏ –ø–æ–ª—è/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞–≤–∏—à.`
        );
    }

    const canvas = createCanvas(pageW, pageH, "png");
    const ctx = canvas.getContext("2d");

    // —Ñ–æ–Ω
    ctx.fillStyle = "#fff";
    ctx.fillRect(0, 0, pageW, pageH);

    const startX = margin.left;
    const startY = margin.top;

    // —Ä–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –∫–∞–∂–¥–æ–π –Ω–∞–∫–ª–µ–π–∫–∏ (—Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ –æ–±—â–µ–π —Å–µ—Ç–∫–∏)
    ctx.strokeStyle = cfg.colors.grid;
    ctx.lineWidth = Math.max(1, mmToPx(cfg.gridStrokeMM, dpi));

    for (let r = 0; r < rows; r++) {
        const row = layout[r] || [];
        let xCursor = startX;
        const y = startY + r * (cellH + gapY);

        for (let c = 0; c < row.length; c++) {
            const key = row[c];
            const u = Number(key.u || 1);
            const keyW = u * cellW + (u - 1) * gapX;

            // —Ä–∞–º–∫–∞ –Ω–∞–∫–ª–µ–π–∫–∏ (–∫–æ–Ω—Ç—É—Ä –¥–ª—è —Ä–µ–∑–∞)
            ctx.strokeRect(xCursor, y, keyW, cellH);

            if (CONFIG.colors.debugCellOutline) {
                ctx.save();
                ctx.strokeStyle = CONFIG.colors.debugCellOutline;
                ctx.strokeRect(xCursor, y, keyW, cellH);
                ctx.restore();
            }

            // –ø–æ–¥–ø–∏—Å–∏
            const legends = key.legends || [];
            const positions = key.positions || ["center"];
            const fontPx = chooseFontSizePx(legends.length, cfg);

            ctx.fillStyle = cfg.colors.text;
            setFontPx(ctx, fontPx, cfg.fonts.family);

            for (let i = 0; i < legends.length; i++) {
                const text = String(legends[i]);
                const posName = positions[i] || "center";
                const [rx, ry] = POS[posName] || POS.center;

                const tx = xCursor + rx * keyW;
                const ty = y + ry * cellH;

                const maxTextWidth = keyW * 0.85;
                const m = ctx.measureText(text);
                let scale = 1;
                if (m.width > maxTextWidth) scale = maxTextWidth / m.width;

                ctx.save();
                ctx.translate(tx, ty);
                ctx.scale(scale, scale);
                ctx.fillText(text, 0, 0);
                ctx.restore();
            }

            // —Å–º–µ—Å—Ç–∏–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–ª–∞–≤–∏—à–µ
            xCursor += keyW;
            if (c < row.length - 1) xCursor += gapX; // –º–µ–∂–∫–ª–∞–≤–∏—à–Ω—ã–π –∑–∞–∑–æ—Ä
        }
    }

    // –º–µ—Ç–∫–∏ –æ–±—Ä–µ–∑–∞ –ø–æ —É–≥–ª–∞–º –ª–∏—Å—Ç–∞
    drawCropMarks(ctx, pageW, pageH, CONFIG.colors.cropMarks);

    return canvas;
}

/** ============================== MAIN ============================== */
(function main() {
    // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: registerFont('/abs/path/MyFont.ttf', { family: 'MyFont' });
    const canvas = renderStickers(LAYOUT, CONFIG);

    const out = fs.createWriteStream("stickers_a4.png");
    const stream = canvas.createPNGStream();
    stream.pipe(out);
    out.on("finish", () => {
        console.log("‚úÖ –ì–æ—Ç–æ–≤–æ: stickers_a4.png");
    });
})();
